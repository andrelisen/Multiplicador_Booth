// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/09/2022 18:33:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Mult_Booth_PO
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Mult_Booth_PO_vlg_sample_tst(
	clk_PO,
	enR_PO,
	init_PO,
	MD_PO,
	MR_PO,
	sampler_tx
);
input  clk_PO;
input  enR_PO;
input  init_PO;
input [5:0] MD_PO;
input [5:0] MR_PO;
output sampler_tx;

reg sample;
time current_time;
always @(clk_PO or enR_PO or init_PO or MD_PO or MR_PO)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Mult_Booth_PO_vlg_check_tst (
	count_PO,
	R_PO,
	sampler_rx
);
input [2:0] count_PO;
input [11:0] R_PO;
input sampler_rx;

reg [2:0] count_PO_expected;
reg [11:0] R_PO_expected;

reg [2:0] count_PO_prev;
reg [11:0] R_PO_prev;

reg [2:0] count_PO_expected_prev;
reg [11:0] R_PO_expected_prev;

reg [2:0] last_count_PO_exp;
reg [11:0] last_R_PO_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	count_PO_prev = count_PO;
	R_PO_prev = R_PO;
end

// update expected /o prevs

always @(trigger)
begin
	count_PO_expected_prev = count_PO_expected;
	R_PO_expected_prev = R_PO_expected;
end


// expected count_PO[ 2 ]
initial
begin
	count_PO_expected[2] = 1'bX;
end 
// expected count_PO[ 1 ]
initial
begin
	count_PO_expected[1] = 1'bX;
end 
// expected count_PO[ 0 ]
initial
begin
	count_PO_expected[0] = 1'bX;
end 
// expected R_PO[ 11 ]
initial
begin
	R_PO_expected[11] = 1'bX;
end 
// expected R_PO[ 10 ]
initial
begin
	R_PO_expected[10] = 1'bX;
end 
// expected R_PO[ 9 ]
initial
begin
	R_PO_expected[9] = 1'bX;
end 
// expected R_PO[ 8 ]
initial
begin
	R_PO_expected[8] = 1'bX;
end 
// expected R_PO[ 7 ]
initial
begin
	R_PO_expected[7] = 1'bX;
end 
// expected R_PO[ 6 ]
initial
begin
	R_PO_expected[6] = 1'bX;
end 
// expected R_PO[ 5 ]
initial
begin
	R_PO_expected[5] = 1'bX;
end 
// expected R_PO[ 4 ]
initial
begin
	R_PO_expected[4] = 1'bX;
end 
// expected R_PO[ 3 ]
initial
begin
	R_PO_expected[3] = 1'bX;
end 
// expected R_PO[ 2 ]
initial
begin
	R_PO_expected[2] = 1'bX;
end 
// expected R_PO[ 1 ]
initial
begin
	R_PO_expected[1] = 1'bX;
end 
// expected R_PO[ 0 ]
initial
begin
	R_PO_expected[0] = 1'bX;
end 
// generate trigger
always @(count_PO_expected or count_PO or R_PO_expected or R_PO)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected count_PO = %b | expected R_PO = %b | ",count_PO_expected_prev,R_PO_expected_prev);
	$display("| real count_PO = %b | real R_PO = %b | ",count_PO_prev,R_PO_prev);
`endif
	if (
		( count_PO_expected_prev[0] !== 1'bx ) && ( count_PO_prev[0] !== count_PO_expected_prev[0] )
		&& ((count_PO_expected_prev[0] !== last_count_PO_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_PO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_PO_expected_prev);
		$display ("     Real value = %b", count_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_PO_exp[0] = count_PO_expected_prev[0];
	end
	if (
		( count_PO_expected_prev[1] !== 1'bx ) && ( count_PO_prev[1] !== count_PO_expected_prev[1] )
		&& ((count_PO_expected_prev[1] !== last_count_PO_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_PO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_PO_expected_prev);
		$display ("     Real value = %b", count_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_PO_exp[1] = count_PO_expected_prev[1];
	end
	if (
		( count_PO_expected_prev[2] !== 1'bx ) && ( count_PO_prev[2] !== count_PO_expected_prev[2] )
		&& ((count_PO_expected_prev[2] !== last_count_PO_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_PO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_PO_expected_prev);
		$display ("     Real value = %b", count_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_PO_exp[2] = count_PO_expected_prev[2];
	end
	if (
		( R_PO_expected_prev[0] !== 1'bx ) && ( R_PO_prev[0] !== R_PO_expected_prev[0] )
		&& ((R_PO_expected_prev[0] !== last_R_PO_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_PO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_PO_expected_prev);
		$display ("     Real value = %b", R_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_PO_exp[0] = R_PO_expected_prev[0];
	end
	if (
		( R_PO_expected_prev[1] !== 1'bx ) && ( R_PO_prev[1] !== R_PO_expected_prev[1] )
		&& ((R_PO_expected_prev[1] !== last_R_PO_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_PO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_PO_expected_prev);
		$display ("     Real value = %b", R_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_PO_exp[1] = R_PO_expected_prev[1];
	end
	if (
		( R_PO_expected_prev[2] !== 1'bx ) && ( R_PO_prev[2] !== R_PO_expected_prev[2] )
		&& ((R_PO_expected_prev[2] !== last_R_PO_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_PO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_PO_expected_prev);
		$display ("     Real value = %b", R_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_PO_exp[2] = R_PO_expected_prev[2];
	end
	if (
		( R_PO_expected_prev[3] !== 1'bx ) && ( R_PO_prev[3] !== R_PO_expected_prev[3] )
		&& ((R_PO_expected_prev[3] !== last_R_PO_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_PO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_PO_expected_prev);
		$display ("     Real value = %b", R_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_PO_exp[3] = R_PO_expected_prev[3];
	end
	if (
		( R_PO_expected_prev[4] !== 1'bx ) && ( R_PO_prev[4] !== R_PO_expected_prev[4] )
		&& ((R_PO_expected_prev[4] !== last_R_PO_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_PO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_PO_expected_prev);
		$display ("     Real value = %b", R_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_PO_exp[4] = R_PO_expected_prev[4];
	end
	if (
		( R_PO_expected_prev[5] !== 1'bx ) && ( R_PO_prev[5] !== R_PO_expected_prev[5] )
		&& ((R_PO_expected_prev[5] !== last_R_PO_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_PO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_PO_expected_prev);
		$display ("     Real value = %b", R_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_PO_exp[5] = R_PO_expected_prev[5];
	end
	if (
		( R_PO_expected_prev[6] !== 1'bx ) && ( R_PO_prev[6] !== R_PO_expected_prev[6] )
		&& ((R_PO_expected_prev[6] !== last_R_PO_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_PO[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_PO_expected_prev);
		$display ("     Real value = %b", R_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_PO_exp[6] = R_PO_expected_prev[6];
	end
	if (
		( R_PO_expected_prev[7] !== 1'bx ) && ( R_PO_prev[7] !== R_PO_expected_prev[7] )
		&& ((R_PO_expected_prev[7] !== last_R_PO_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_PO[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_PO_expected_prev);
		$display ("     Real value = %b", R_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_PO_exp[7] = R_PO_expected_prev[7];
	end
	if (
		( R_PO_expected_prev[8] !== 1'bx ) && ( R_PO_prev[8] !== R_PO_expected_prev[8] )
		&& ((R_PO_expected_prev[8] !== last_R_PO_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_PO[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_PO_expected_prev);
		$display ("     Real value = %b", R_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_PO_exp[8] = R_PO_expected_prev[8];
	end
	if (
		( R_PO_expected_prev[9] !== 1'bx ) && ( R_PO_prev[9] !== R_PO_expected_prev[9] )
		&& ((R_PO_expected_prev[9] !== last_R_PO_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_PO[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_PO_expected_prev);
		$display ("     Real value = %b", R_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_PO_exp[9] = R_PO_expected_prev[9];
	end
	if (
		( R_PO_expected_prev[10] !== 1'bx ) && ( R_PO_prev[10] !== R_PO_expected_prev[10] )
		&& ((R_PO_expected_prev[10] !== last_R_PO_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_PO[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_PO_expected_prev);
		$display ("     Real value = %b", R_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_PO_exp[10] = R_PO_expected_prev[10];
	end
	if (
		( R_PO_expected_prev[11] !== 1'bx ) && ( R_PO_prev[11] !== R_PO_expected_prev[11] )
		&& ((R_PO_expected_prev[11] !== last_R_PO_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_PO[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_PO_expected_prev);
		$display ("     Real value = %b", R_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_PO_exp[11] = R_PO_expected_prev[11];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Mult_Booth_PO_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_PO;
reg enR_PO;
reg init_PO;
reg [5:0] MD_PO;
reg [5:0] MR_PO;
// wires                                               
wire [2:0] count_PO;
wire [11:0] R_PO;

wire sampler;                             

// assign statements (if any)                          
Mult_Booth_PO i1 (
// port map - connection between master ports and signals/registers   
	.clk_PO(clk_PO),
	.count_PO(count_PO),
	.enR_PO(enR_PO),
	.init_PO(init_PO),
	.MD_PO(MD_PO),
	.MR_PO(MR_PO),
	.R_PO(R_PO)
);
// MD_PO[ 5 ]
initial
begin
	MD_PO[5] = 1'b0;
end 
// MD_PO[ 4 ]
initial
begin
	MD_PO[4] = 1'b1;
end 
// MD_PO[ 3 ]
initial
begin
	MD_PO[3] = 1'b0;
end 
// MD_PO[ 2 ]
initial
begin
	MD_PO[2] = 1'b1;
end 
// MD_PO[ 1 ]
initial
begin
	MD_PO[1] = 1'b0;
end 
// MD_PO[ 0 ]
initial
begin
	MD_PO[0] = 1'b1;
end 
// MR_PO[ 5 ]
initial
begin
	MR_PO[5] = 1'b0;
end 
// MR_PO[ 4 ]
initial
begin
	MR_PO[4] = 1'b1;
end 
// MR_PO[ 3 ]
initial
begin
	MR_PO[3] = 1'b1;
end 
// MR_PO[ 2 ]
initial
begin
	MR_PO[2] = 1'b1;
end 
// MR_PO[ 1 ]
initial
begin
	MR_PO[1] = 1'b1;
end 
// MR_PO[ 0 ]
initial
begin
	MR_PO[0] = 1'b0;
end 

// clk_PO
always
begin
	clk_PO = 1'b0;
	clk_PO = #5000 1'b1;
	#5000;
end 

// init_PO
initial
begin
	init_PO = 1'b1;
	init_PO = #15000 1'b0;
end 

// enR_PO
initial
begin
	enR_PO = 1'b0;
	enR_PO = #25000 1'b1;
	enR_PO = #45000 1'b0;
end 

Mult_Booth_PO_vlg_sample_tst tb_sample (
	.clk_PO(clk_PO),
	.enR_PO(enR_PO),
	.init_PO(init_PO),
	.MD_PO(MD_PO),
	.MR_PO(MR_PO),
	.sampler_tx(sampler)
);

Mult_Booth_PO_vlg_check_tst tb_out(
	.count_PO(count_PO),
	.R_PO(R_PO),
	.sampler_rx(sampler)
);
endmodule

